---
title: "R Notebook"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
# Load packages
library(tidyverse)
library(httr)
library(jsonlite)
library(magrittr)
#library(mongolite)
```

```{r}
loopdf<-read.csv(file="loopdf.csv") 
loopdf<-select(loopdf, person_id, case_number)

sample<-slice(loopdf,1:2)
sample$case_number<-as.character(sample$case_number)
sample$person_id<-as.numeric(sample$person_id)

```


running functions
safe_api_call(casenumber, request_type) casenumber is a string
```{r}
setwd("C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data-query/Queried data")
#so that writeToSystem writes to correct place

pb <- progress_estimated(length(sample$case_number))

api_call<-function(sample_row,request){
  person.id<-sample_row$person_id[1]
  case.number<-sample_row$case_number[2]
  options(error=recover)
  pb$tick()$print()
  Sys.sleep(sample(seq(0.5, 2.5, 0.5), 1)) #time delay between calls

  eventsdocs<-getJSON(case.number ,request)
  file<-writeToSystem(eventsdocs,case.number,"eventsdocs.txt") #saves file to system using casenum and 
#request type in the name
  json_fromfile<-fromJSON(txt=file)
  #a list df hybrid
  json_df<-json_fromfile%>%
              use_series(EventList)%>%  #the magrittr version of $ operator
              mutate(case_num=case.number, person_id=person.id)
  return(json_df)
}

safe_api_call<-safely(api_call)
df_as_list<-sample%>%
              split(seq(nrow(.)))%>%
              lapply(as.list)

eventsdocs_df<-map_dfr(df_as_list, ~safe_api_call(.x,"events_and_documents"))
#, .$case_number = "case_number",.$person_id = "person_id"
```

```{r}
#What would happen if it's too big to store in my environment
write.csv(eventsdocs_df,"eventsdocs_df.csv")

```



*this function returns a json string from the Broward Clerk's website *
idea: create API wrapper
***Must log in before running code***
```{r}
getJSON<-function(casenumber,request_type){
  url_broward<-"https://api.browardclerk.org/api/"
  key<-"Lo5Mt6EEJIwDILvpusItyvDntLsLqMwuMGzrvLFDsKzDsnypquI3JD6CLKoopLxwvnypttCKEqGnGs6sF9EKFnr21qD4MJFnvEwovDwqtp73nzCtyEGzJrsy8K4rsD9tFEGvKp8pspEyxrGw0oxtEF2HFoD1KrHGGExttDHJCF2yz1zoDuDxnpxnuwsJo8rK7H1GspGGIxxFztDLutDyqHGDrvF3sHJsyxwzLCwDJnMCnMw3CMsHvzrLEK"

  eventsdocs<-RETRY("GET", url=paste0(url_broward,'case/',casenumber,'/',request_type,'.json?auth_key=',key),times=5)
    #retries until http_error (boolean) returns false; true if status code is 400+
    #retries max of 5x; 1 sec pauses between tries
  return(eventsdocs) #r automatically returns last line but we'll explicitly return this here
}

```

takes a json HTTP response and saves it as .txt file 
a "void" function
```{r}

writeToSystem<-function(json_response,casenumber, filetype){
  filename=paste(casenumber,filetype, sep="")
  raw<-content(json_response,"raw")
#  invisible(writeBin(raw, filename))
  writeBin(raw,filename)
  return(filename)
}
```

Testing mongo
```{r}
m <- mongo("diamonds")
m$insert(ggplot2::diamonds)
```

Test call to api
```{r}
casenum<-"16000333CF10A"
request="events_and_documents"
eventsdocs<-getJSON(casenum,request)
writeToSystem(eventsdocs,casenum,"eventsdocs.txt")
testdf<-api_call(casenum,request)
```

Test map_dfr
```{r}
#takes mpg as input and returns a df
testiris<-select(head(iris),Sepal.Length, Sepal.Width)
self<-function(testlist){
  print("entered function")
  mpg<-testlist[1]$mpg
  print(mpg)
  cyl<-testlist[2]$cyl
  result<-testiris%>%
             multiply_by(mpg)%>%
             mutate(multbympg=mpg,name=cyl)
  return (result)
}
#testlist=as.list(mtcars)
testlist<-mtcars%>%
              head()%>%
              split(seq(nrow(.)))
#testlist <- split(mtcars, seq(nrow(mtcars)))

testcars<-map_dfr(testlist,~self(.x)) #finding: mapdfr takes a list as input, or coerces df coumns to list
#should return df with the mpg*testiris
#Expected length: iris length * mtcars length; 6*32=192
```


Test processing with jsonlite
Findings: json_fromfile is the same as json_fromurl
Either way i do it, should probably do the http request just so I can check status
```{r}
#test with reading from file
json_fromfile<-fromJSON(txt=filename)
#a list dfhybrid
json_df<-json_fromfile$EventList #a dataframe
names(json_df$PartyList[1])

# #test with reading from url
# request_type="events_and_documents"
# casenumber<-"16000333CF10A"
# json_fromurl<-fromJSON(txt=paste0(url_broward,'case/',casenumber,'/',request_type,'.json?auth_key=',key))
#just need the description of each event, don't need anything else
#from command print(eventlist$EventList): each element of eventlist$EventList has $EventDate, $Description, $EventAmount, $AdditionalText, $PartyList, $Party2List, $CauseList, 
#$EventDocumentList, $EventDocumentList$Name, $EventDocumentList$Page, $eventDocument$Confidential

```









