Now to add the column info (casenumbers, person_ids)
development test code with mtcars: 

#takes mpg as input and returns a df
testiris<-select(head(iris),Sepal.Length, Sepal.Width)
self<-function(testlist){
  print("entered function")
  mpg<-testlist[1]$mpg
  print(mpg)
  cyl<-testlist[2]$cyl
  result<-testiris%>%
             multiply_by(mpg)%>%
             mutate(multbympg=mpg,name=cyl)
  return (result)
}
#testlist=as.list(mtcars)
testlist<-mtcars%>%
              head()%>%
              split(seq(nrow(.)))
#testlist <- split(mtcars, seq(nrow(mtcars)))

testcars<-map_dfr(testlist,~self(.x)) #finding: mapdfr takes a list as input, or coerces df coumns to list
#should return df with the mpg*testiris
#Expected length: iris length * mtcars length; 6*32=192

_________________________________
Attempted changing syntax based off of testing mtcars. Discovered map_dfr loops over a LIST, or the columns of a dfr 
and returns row bound dfs 

#takes mpg as input and returns a df
testiris<-select(head(iris),Sepal.Length, Sepal.Width)


self<-function(mpg){
  print (mpg)
  result<-mpg*testiris
#  print(result)
  return (result)
}

testlist=as.list(mtcars$mpg)
testcars<-map_dfr(testlist,~self(.x)) #finding: mapdfr takes a list as input, or coerces df coumns to list


_________________________________


Removed safely wrapper from safe_api_call; 
Error in .$case_number : $ operator is invalid for atomic vectors

Enter a frame number, or 0 to exit   

1: map_dfr(sample, ~safe_api_call(.$case_number, "events_and_documents"))
function (.x, .f, ..., .id = NULL) 
{
  if (!is_installed("dplyr")) {
    abort("`map_df()` requires dplyr")
  }
  .f <- as_mapper(.f, ...)
 ** res <- map(.x, .f, ...)
  dplyr::bind_rows(res, .id = .id)
}

2: map(.x, .f, ...)

3: .f(.x[[i]], ...)     **problem lies in .f?
function (.x, .f, ...) 
{
  .f <- as_mapper(.f, ...)
  .Call(map_impl, environment(), ".x", ".f", "list")
}

4: safe_api_call(.$case_number, "events_and_documents")
5: #6: getJSON(casenumber, request)
6: #5: RETRY("GET", url = paste0(url_broward, "case/", casenumber, "/", request_type, ".json?auth_key="
7: handle_url(handle, url, ...)
8: paste0(url_broward, "case/", casenumber, "/", request_type, ".json?auth_key=", key)



__________________
$person_id
$person_id$result
NULL

$person_id$error
<simpleError in .$case_number: $ operator is invalid for atomic vectors>


$case_number
$case_number$result
NULL

Class(res)=list, when it needs to be atomic vector

$case_number$error
<simpleError: $ operator is invalid for atomic vectors>

function (..., .x = ..1, .y = ..2, . = ..1) 
safe_api_call(.$case_number, "events_and_documents")
<bytecode: 0x000000000a34d830>