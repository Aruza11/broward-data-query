data import testing code (Thursday, 1/4/18)
Test map_dfr
```{r}
#takes mpg as input and returns a df
testiris<-select(head(iris),Sepal.Length, Sepal.Width)
self<-function(testlist){
  print("entered function")

  mpg<-testlist[1]$mpg
  print(mpg)
  cyl<-testlist[2]$cyl
  result<-testiris%>%
             multiply_by(mpg)%>%
             mutate(multbympg=mpg,name=cyl)
  return (result)
}
#testlist=as.list(mtcars)
testlist<-mtcars%>%
              head()%>%
              split(seq(nrow(.)))
#testlist <- split(mtcars, seq(nrow(mtcars)))

testcars<-map_dfr(testlist,~self(.x)) #finding: mapdfr takes a list as input, or coerces df coumns to list
#should return df with the mpg*testiris
#Expected length: iris length * mtcars length; 6*32=192
```
Test map_dfr with df_as_list
```{r}
testiris<-select(head(iris),Sepal.Length, Sepal.Width)
self<-function(sample_row){
  person.id<-sample_row$person_id
  case.number<-sample_row$case_number
  
#  print("entered function")
  result<-testiris%>%
             multiply_by(5)%>%
             mutate(persid=person.id,casenum=case.number)
  return (result)
}

safe_self<-safely(self)

wrapper<-function(sample_row){
#  person.id<-sample_row$person_id
 # case.number<-sample_row$case_number
 # print(sample_row)
  res<-safe_self(sample_row)
#  print(res$result)
  if(is.null(res$result)){
  #  print(person.id, case.number)
    print("is null")
    return()
  }
  print("passed")
  return(res$result)
}

testmap<-map_dfr(df_with_flaw, ~wrapper(.x))

#QUestion: how does map_dfr deal with 1 null? 
Answer: deals well, returns anyways
df_with_flaw<-df_as_list
df_with_flaw$`1`$case_number=NULL
sample_row<-df_as_list$`2`
testresult<-safe_self(sample_row)
```

Test processing with jsonlite
Findings: json_fromfile is the same as json_fromurl
Either way i do it, should probably do the http request just so I can check status
```{r}
#test with reading from file
json_fromfile<-fromJSON(txt=filename)
#a list dfhybrid
json_df<-json_fromfile$EventList #a dataframe
names(json_df$PartyList[1])

# #test with reading from url
# request_type="events_and_documents"
# casenumber<-"16000333CF10A"
# json_fromurl<-fromJSON(txt=paste0(url_broward,'case/',casenumber,'/',request_type,'.json?auth_key=',key))
#just need the description of each event, don't need anything else
#from command print(eventlist$EventList): each element of eventlist$EventList has $EventDate, $Description, $EventAmount, $AdditionalText, $PartyList, $Party2List, $CauseList, 
#$EventDocumentList, $EventDocumentList$Name, $EventDocumentList$Page, $eventDocument$Confidential
